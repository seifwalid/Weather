// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.Data;

#nullable disable

namespace Weather.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Weather.Model.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CurrentParameterVal")
                        .HasColumnType("float");

                    b.Property<double>("Difference")
                        .HasColumnType("float");

                    b.Property<double>("ParameterLimit")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Weather.Model.PermissibleLimits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxCarbonMonoxide")
                        .HasColumnType("float");

                    b.Property<double>("MaxHumidity")
                        .HasColumnType("float");

                    b.Property<double>("MaxNitrogenDioxide")
                        .HasColumnType("float");

                    b.Property<double>("MaxOzone")
                        .HasColumnType("float");

                    b.Property<double>("MaxPM10")
                        .HasColumnType("float");

                    b.Property<double>("MaxPM2_5")
                        .HasColumnType("float");

                    b.Property<double>("MaxSulphurDioxide")
                        .HasColumnType("float");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("PermissibleLimits");
                });

            modelBuilder.Entity("Weather.Model.Userr", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserPermissibleLimitsId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserPermissibleLimitsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Weather.Model.Alert", b =>
                {
                    b.HasOne("Weather.Model.Userr", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Weather.Model.Userr", b =>
                {
                    b.HasOne("Weather.Model.PermissibleLimits", "UserPermissibleLimits")
                        .WithMany()
                        .HasForeignKey("UserPermissibleLimitsId");

                    b.Navigation("UserPermissibleLimits");
                });
#pragma warning restore 612, 618
        }
    }
}
